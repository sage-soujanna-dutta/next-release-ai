#!/usr/bin/env node

/**
 * Test script to verify JIRA Boards MCP Tool integration with static mappings
 */

import dotenv from 'dotenv';
dotenv.config();

console.log('üöÄ Testing JIRA Boards MCP Tool & Static Mappings Integration\n');

try {
  // Import the compiled modules
  const { MCPToolFactory } = await import('./dist/core/MCPToolFactory.js');
  const { BoardLookup, STATIC_BOARD_MAPPINGS } = await import('./dist/utils/BoardMappings.js');
  
  console.log('‚úÖ Modules imported successfully');
  
  // Create factory with JIRA category
  const factory = new MCPToolFactory({
    enabledCategories: ['jira']
  });
  
  console.log(`üìä Factory initialized with ${factory.getToolCount()} tools\n`);
  
  // Test 1: Direct Static Board Mappings Access
  console.log('üîß Test 1: Direct Static Board Mappings Access');
  console.log('=' .repeat(50));
  
  console.log('üìã Available static utilities:');
  console.log('  ‚Ä¢ Available projects:', factory.getAvailableProjects().slice(0, 10), '...');
  console.log('  ‚Ä¢ Board for SCNT:', factory.getBoardIdByProject('SCNT'));
  console.log('  ‚Ä¢ Board for NDS:', factory.getBoardIdByProject('NDS'));
  console.log('  ‚Ä¢ Search "network":', factory.searchBoards('network').length, 'results');
  console.log('  ‚Ä¢ Total static mappings:', Object.keys(STATIC_BOARD_MAPPINGS).length);
  
  // Test 2: MCP Tool - Static Mode
  console.log('\nüîß Test 2: MCP Tool - Static Mode');
  console.log('=' .repeat(50));
  
  const listBoardsTool = factory.getTool('list_all_jira_boards');
  
  if (!listBoardsTool) {
    console.error('‚ùå Tool not found!');
    process.exit(1);
  }
  
  console.log('‚úÖ Tool found:', listBoardsTool.description);
  
  // Test static summary
  console.log('\nüìä Testing static summary format...');
  const summaryResult = await listBoardsTool.execute({ 
    useStatic: true, 
    format: 'summary' 
  });
  
  if (summaryResult.isError) {
    console.error('‚ùå Summary test failed:', summaryResult.content[0].text);
  } else {
    console.log('‚úÖ Summary test passed!');
    console.log(summaryResult.content[0].text.substring(0, 500) + '...\n');
  }
  
  // Test 3: JavaScript Object Format
  console.log('üîß Test 3: JavaScript Object Format');
  console.log('=' .repeat(50));
  
  const jsResult = await listBoardsTool.execute({ 
    useStatic: true, 
    format: 'javascript' 
  });
  
  if (jsResult.isError) {
    console.error('‚ùå JavaScript format test failed:', jsResult.content[0].text);
  } else {
    console.log('‚úÖ JavaScript format test passed!');
    const content = jsResult.content[0].text;
    const codeBlock = content.match(/```javascript\n([\s\S]*?)\n```/);
    if (codeBlock) {
      console.log('üìã JavaScript object generated (sample):');
      const jsContent = codeBlock[1];
      console.log(jsContent.substring(0, 300) + '...\n');
    }
  }
  
  // Test 4: Search Functionality
  console.log('üîß Test 4: Search Functionality');
  console.log('=' .repeat(50));
  
  const searchResult = await listBoardsTool.execute({ 
    useStatic: true, 
    format: 'detailed',
    searchTerm: 'SCNT' 
  });
  
  if (searchResult.isError) {
    console.error('‚ùå Search test failed:', searchResult.content[0].text);
  } else {
    console.log('‚úÖ Search test passed!');
    console.log('üîç SCNT search results preview:');
    const lines = searchResult.content[0].text.split('\n');
    console.log(lines.slice(0, 10).join('\n') + '...\n');
  }
  
  // Test 5: Direct BoardLookup Usage
  console.log('üîß Test 5: Direct BoardLookup Usage');
  console.log('=' .repeat(50));
  
  console.log('üîç Testing BoardLookup utilities:');
  console.log('  ‚Ä¢ SCNT board ID:', BoardLookup.getBoardIdByProject('SCNT'));
  console.log('  ‚Ä¢ All project keys count:', BoardLookup.getAllProjectKeys().length);
  console.log('  ‚Ä¢ Search "security":', BoardLookup.searchBoardsByName('security').length, 'results');
  
  // Success summary
  console.log('\nüéâ All Tests Completed Successfully!');
  console.log('=' .repeat(50));
  console.log('‚úÖ MCP Tool Integration: Working');
  console.log('‚úÖ Static Board Mappings: Available');
  console.log('‚úÖ MCPToolFactory Utilities: Working');
  console.log('‚úÖ JavaScript Object Generation: Working');
  console.log('‚úÖ Search Functionality: Working');
  
  console.log('\nüí° Usage Examples:');
  console.log('üîß Programmatic access:');
  console.log('   const factory = new MCPToolFactory();');
  console.log('   const boardId = factory.getBoardIdByProject("SCNT");');
  console.log('');
  console.log('üîß MCP Tool usage:');
  console.log('   const tool = factory.getTool("list_all_jira_boards");');
  console.log('   const result = await tool.execute({ useStatic: true, format: "javascript" });');
  
} catch (error) {
  console.error('‚ùå Test failed:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
}
