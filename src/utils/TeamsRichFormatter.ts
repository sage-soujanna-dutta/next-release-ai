/**
 * Enhanced Teams message formatter for rich, professional layouts
 * Supports tables, emphasis, emojis, and action-oriented design
 */

export interface TableData {
  headers: string[];
  rows: string[][];
  style?: 'default' | 'accent' | 'good' | 'warning' | 'attention';
}

export interface ActionItem {
  emoji: string;
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  deadline?: string;
  assignee?: string;
}

export interface MetricCard {
  emoji: string;
  label: string;
  value: string;
  status: 'success' | 'warning' | 'error' | 'info';
  trend?: 'up' | 'down' | 'stable';
}

export class TeamsRichFormatter {
  
  /**
   * Create a rich table structure using Markdown-style formatting
   */
  static formatTable(data: TableData): string {
    if (!data.headers.length || !data.rows.length) return '';

    const headerRow = `| ${data.headers.join(' | ')} |`;
    const separatorRow = `|${data.headers.map(() => '----------').join('|')}|`;
    const dataRows = data.rows.map(row => `| ${row.join(' | ')} |`).join('\n');

    return `${headerRow}\n${separatorRow}\n${dataRows}`;
  }

  /**
   * Create a metrics dashboard layout
   */
  static formatMetricsDashboard(metrics: MetricCard[]): string {
    const formatted = metrics.map(metric => {
      const trendIcon = metric.trend === 'up' ? '📈' : 
                       metric.trend === 'down' ? '📉' : 
                       metric.trend === 'stable' ? '➡️' : '';
      
      const statusIcon = metric.status === 'success' ? '✅' : 
                        metric.status === 'warning' ? '⚠️' : 
                        metric.status === 'error' ? '❌' : 
                        'ℹ️';

      return `${metric.emoji} **${metric.label}** | **${metric.value}** ${trendIcon} ${statusIcon}`;
    });

    return formatted.join('\n');
  }

  /**
   * Create an action items section with priority formatting
   */
  static formatActionItems(actions: ActionItem[]): string {
    const priorityIcons = {
      high: '🔴',
      medium: '🟡', 
      low: '🟢'
    };

    const formatted = actions.map((action, index) => {
      const priorityIcon = priorityIcons[action.priority];
      const assigneeText = action.assignee ? ` | 👤 **${action.assignee}**` : '';
      const deadlineText = action.deadline ? ` | ⏰ **${action.deadline}**` : '';
      
      return `${index + 1}. ${action.emoji} **${action.title}** ${priorityIcon}\n   ${action.description}${assigneeText}${deadlineText}`;
    });

    return formatted.join('\n\n');
  }

  /**
   * Create a collapsible section with summary
   */
  static formatCollapsibleSection(title: string, summary: string, content: string): string {
    return `## ${title}

> **${summary}**

<details>
<summary>📋 View Details</summary>

${content}

</details>`;
  }

  /**
   * Create a professional header with branding
   */
  static formatHeader(title: string, subtitle?: string, status?: string): string {
    const statusBadge = status ? ` | ${status}` : '';
    const subtitleText = subtitle ? `\n### ${subtitle}` : '';
    
    return `# ${title}${statusBadge}${subtitleText}

---`;
  }

  /**
   * Create a call-to-action section
   */
  static formatCallToAction(title: string, actions: Array<{text: string, url?: string}>): string {
    const actionButtons = actions.map(action => {
      if (action.url) {
        return `🔗 **[${action.text}](${action.url})**`;
      }
      return `📋 **${action.text}**`;
    }).join(' | ');

    return `## ${title}

${actionButtons}`;
  }

  /**
   * Create a status summary with visual indicators
   */
  static formatStatusSummary(items: Array<{label: string, status: 'complete' | 'pending' | 'blocked' | 'in-progress'}>): string {
    const statusIcons = {
      complete: '✅',
      pending: '⏳',
      blocked: '🚫',
      'in-progress': '🔄'
    };

    const formatted = items.map(item => 
      `${statusIcons[item.status]} **${item.label}**`
    );

    return formatted.join('\n');
  }

  /**
   * Create a professional footer with metadata
   */
  static formatFooter(generatedBy: string, timestamp?: Date, version?: string): string {
    const time = timestamp ? timestamp.toLocaleString() : new Date().toLocaleString();
    const versionText = version ? ` | Version: ${version}` : '';
    
    return `---

📋 **Generated by:** ${generatedBy} | ⏰ **Time:** ${time}${versionText}

💬 **Questions?** Contact your team leads for assistance.`;
  }

  /**
   * Create a complete rich notification layout
   */
  static formatCompleteNotification(options: {
    header: { title: string; subtitle?: string; status?: string };
    metrics?: MetricCard[];
    tables?: Array<{ title: string; data: TableData }>;
    actions?: ActionItem[];
    callToAction?: { title: string; actions: Array<{text: string, url?: string}> };
    footer: { generatedBy: string; timestamp?: Date; version?: string };
  }): string {
    let content = this.formatHeader(options.header.title, options.header.subtitle, options.header.status);

    // Add metrics dashboard
    if (options.metrics?.length) {
      content += `\n\n## 📊 **KEY METRICS**\n\n${this.formatMetricsDashboard(options.metrics)}`;
    }

    // Add tables
    if (options.tables?.length) {
      options.tables.forEach(table => {
        content += `\n\n## ${table.title}\n\n${this.formatTable(table.data)}`;
      });
    }

    // Add action items
    if (options.actions?.length) {
      content += `\n\n## 🎯 **ACTION ITEMS**\n\n${this.formatActionItems(options.actions)}`;
    }

    // Add call to action
    if (options.callToAction) {
      content += `\n\n${this.formatCallToAction(options.callToAction.title, options.callToAction.actions)}`;
    }

    // Add footer
    content += `\n\n${this.formatFooter(options.footer.generatedBy, options.footer.timestamp, options.footer.version)}`;

    return content;
  }

  /**
   * Sanitize content for Teams formatting
   */
  static sanitizeForTeams(content: string): string {
    // Remove unsupported markdown elements and fix formatting
    return content
      .replace(/\*\*\*(.*?)\*\*\*/g, '**$1**') // Convert triple asterisk to bold
      .replace(/`{3}[\s\S]*?`{3}/g, '') // Remove code blocks
      .replace(/^\s*[-+*]\s+/gm, '• ') // Normalize bullet points
      .replace(/^\s*\d+\.\s+/gm, (match, offset, string) => {
        const num = string.substring(0, offset).split('\n').filter((line: string) => /^\s*\d+\.\s+/.test(line)).length + 1;
        return `${num}. `;
      }) // Fix numbering
      .trim();
  }
}
